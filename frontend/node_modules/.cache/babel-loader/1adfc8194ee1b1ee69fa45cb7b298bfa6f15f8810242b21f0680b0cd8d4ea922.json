{"ast":null,"code":"// API Service for Container SSH System\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nasync function apiRequest(endpoint, options = {}) {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, defaultOptions);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(`API 요청 실패 (${endpoint}):`, error);\n    throw error;\n  }\n}\n\n// 컨테이너 관련 API\nexport const getContainers = async () => {\n  return apiRequest('/api/containers');\n};\nexport const getContainer = async containerId => {\n  return apiRequest(`/api/containers/${containerId}`);\n};\n\n// 터미널 세션 관련 API\nexport const getTerminalSessions = async () => {\n  return apiRequest('/api/terminal/sessions');\n};\n\n// WebSocket 연결을 위한 URL 생성\nexport const getWebSocketUrl = containerId => {\n  const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n  const wsHost = process.env.REACT_APP_WS_HOST || 'localhost:8080';\n  return `${wsProtocol}//${wsHost}/ws/terminal/${containerId}`;\n};\n\n// 터미널 연결 상태 확인\nexport const checkContainerAccess = async containerId => {\n  try {\n    const container = await getContainer(containerId);\n    return container.status === 'running' || container.status === 'online';\n  } catch (error) {\n    console.error('컨테이너 접근 확인 실패:', error);\n    return false;\n  }\n};\n\n// 헬스체크 API\nexport const healthCheck = async () => {\n  return apiRequest('/api/health');\n};\n\n// 에러 처리를 위한 유틸리티 함수\nexport const handleApiError = error => {\n  if (error instanceof Error) {\n    if (error.message.includes('Failed to fetch')) {\n      return '서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\n    }\n    if (error.message.includes('HTTP 404')) {\n      return '요청한 리소스를 찾을 수 없습니다.';\n    }\n    if (error.message.includes('HTTP 403')) {\n      return '접근 권한이 없습니다.';\n    }\n    if (error.message.includes('HTTP 500')) {\n      return '서버 내부 오류가 발생했습니다.';\n    }\n    return error.message;\n  }\n  return '알 수 없는 오류가 발생했습니다.';\n};\n\n// 개발용 Mock 데이터 (아직 백엔드 준비X)\nexport const getMockContainers = () => {\n  return {\n    containers: [{\n      id: 'teleport-node-1',\n      name: 'production-web',\n      status: 'online',\n      labels: {\n        environment: 'production',\n        service: 'web'\n      },\n      nodeAddr: '0.0.0.0:3022',\n      image: 'nginx:latest',\n      created: new Date().toISOString(),\n      ports: ['80:8080', '443:8443'],\n      uptime: '2d 5h 30m'\n    }, {\n      id: 'teleport-node-2',\n      name: 'database-primary',\n      status: 'online',\n      labels: {\n        environment: 'production',\n        service: 'database'\n      },\n      nodeAddr: '10.0.1.101:3022',\n      image: 'postgres:13',\n      created: new Date().toISOString(),\n      ports: ['5432:5432'],\n      uptime: '5d 12h 15m'\n    }, {\n      id: 'teleport-node-3',\n      name: 'staging-api',\n      status: 'stopped',\n      labels: {\n        environment: 'staging',\n        service: 'api'\n      },\n      nodeAddr: '10.0.2.100:3022',\n      image: 'node:16-alpine',\n      created: new Date().toISOString(),\n      ports: ['3000:3000'],\n      uptime: '0m'\n    }],\n    total: 3\n  };\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","url","defaultOptions","headers","response","fetch","ok","errorText","text","Error","status","data","json","error","console","getContainers","getContainer","containerId","getTerminalSessions","getWebSocketUrl","wsProtocol","window","location","protocol","wsHost","REACT_APP_WS_HOST","checkContainerAccess","container","healthCheck","handleApiError","message","includes","getMockContainers","containers","id","name","labels","environment","service","nodeAddr","image","created","Date","toISOString","ports","uptime","total"],"sources":["/Users/heoyejin/Desktop/teleport-opnesource/frontend/src/services/api.ts"],"sourcesContent":["// API Service for Container SSH System\n\nimport { Container, ContainerListResponse, TerminalSessionListResponse, ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nasync function apiRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    const defaultOptions: RequestInit = {\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers,\n        },\n        ...options,\n    };\n\n    try {\n        const response = await fetch(url, defaultOptions);\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`HTTP ${response.status}: ${errorText}`);\n        }\n\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(`API 요청 실패 (${endpoint}):`, error);\n        throw error;\n    }\n}\n\n// 컨테이너 관련 API\nexport const getContainers = async (): Promise<ContainerListResponse> => {\n    return apiRequest<ContainerListResponse>('/api/containers');\n};\n\nexport const getContainer = async (containerId: string): Promise<Container> => {\n    return apiRequest<Container>(`/api/containers/${containerId}`);\n};\n\n// 터미널 세션 관련 API\nexport const getTerminalSessions = async (): Promise<TerminalSessionListResponse> => {\n    return apiRequest<TerminalSessionListResponse>('/api/terminal/sessions');\n};\n\n// WebSocket 연결을 위한 URL 생성\nexport const getWebSocketUrl = (containerId: string): string => {\n    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsHost = process.env.REACT_APP_WS_HOST || 'localhost:8080';\n    return `${wsProtocol}//${wsHost}/ws/terminal/${containerId}`;\n};\n\n// 터미널 연결 상태 확인\nexport const checkContainerAccess = async (containerId: string): Promise<boolean> => {\n    try {\n        const container = await getContainer(containerId);\n        return container.status === 'running' || container.status === 'online';\n    } catch (error) {\n        console.error('컨테이너 접근 확인 실패:', error);\n        return false;\n    }\n};\n\n// 헬스체크 API\nexport const healthCheck = async (): Promise<{ status: string; timestamp: string }> => {\n    return apiRequest<{ status: string; timestamp: string}>('/api/health');\n};\n\n// 에러 처리를 위한 유틸리티 함수\nexport const handleApiError = (error: any): string => {\n    if (error instanceof Error) {\n        if (error.message.includes('Failed to fetch')) {\n            return '서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\n        }\n        if (error.message.includes('HTTP 404')) {\n            return '요청한 리소스를 찾을 수 없습니다.';\n        }\n        if (error.message.includes('HTTP 403')) {\n            return '접근 권한이 없습니다.';\n        }\n        if (error.message.includes('HTTP 500')) {\n            return '서버 내부 오류가 발생했습니다.';\n        }\n        return error.message;\n    }\n    return '알 수 없는 오류가 발생했습니다.';\n};\n\n// 개발용 Mock 데이터 (아직 백엔드 준비X)\nexport const getMockContainers = (): ContainerListResponse => {\n    return {\n      containers: [\n        {\n          id: 'teleport-node-1',\n          name: 'production-web',\n          status: 'online',\n          labels: {\n            environment: 'production',\n            service: 'web',\n          },\n          nodeAddr: '0.0.0.0:3022',\n          image: 'nginx:latest',\n          created: new Date().toISOString(),\n          ports: ['80:8080', '443:8443'],\n          uptime: '2d 5h 30m',\n        },\n        {\n          id: 'teleport-node-2',\n          name: 'database-primary',\n          status: 'online',\n          labels: {\n            environment: 'production',\n            service: 'database',\n          },\n          nodeAddr: '10.0.1.101:3022',\n          image: 'postgres:13',\n          created: new Date().toISOString(),\n          ports: ['5432:5432'],\n          uptime: '5d 12h 15m',\n        },\n        {\n          id: 'teleport-node-3',\n          name: 'staging-api',\n          status: 'stopped',\n          labels: {\n            environment: 'staging',\n            service: 'api',\n          },\n          nodeAddr: '10.0.2.100:3022',\n          image: 'node:16-alpine',\n          created: new Date().toISOString(),\n          ports: ['3000:3000'],\n          uptime: '0m',\n        },\n      ],\n      total: 3,\n    };\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}