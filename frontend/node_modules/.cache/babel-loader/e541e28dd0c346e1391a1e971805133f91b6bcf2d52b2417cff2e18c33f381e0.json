{"ast":null,"code":"// API Service for Container SSH System\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nclass ApiService {\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return {\n        data,\n        success: true\n      };\n    } catch (error) {\n      console.error(`API Error (${endpoint}):`, error);\n      return {\n        data: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // Health check\n  async checkHealth() {\n    return this.request('/health');\n  }\n\n  // Container operations\n  async getContainers() {\n    return this.request('/containers');\n  }\n  async getContainer(id) {\n    return this.request(`/containers/${id}`);\n  }\n  async connectContainer(id) {\n    return this.request(`/containers/${id}/connect`, {\n      method: 'POST'\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","request","endpoint","options","url","config","headers","response","fetch","ok","Error","status","statusText","data","json","success","error","console","message","checkHealth","getContainers","getContainer","id","connectContainer","method","apiService"],"sources":["/Users/heoyejin/Desktop/teleport-opnesource/frontend/src/services/api.ts"],"sourcesContent":["// API Service for Container SSH System\n\nimport { Container } from '../types';\n\ninterface ApiResponse<T> {\n  data: T;\n  success: boolean;\n  message?: string;\n  error?: string;\n}\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\nclass ApiService {\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        data,\n        success: true,\n      };\n    } catch (error) {\n      console.error(`API Error (${endpoint}):`, error);\n      \n      return {\n        data: null as T,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Health check\n  async checkHealth(): Promise<ApiResponse<{ status: string; message: string }>> {\n    return this.request('/health');\n  }\n\n  // Container operations\n  async getContainers(): Promise<ApiResponse<Container[]>> {\n    return this.request('/containers');\n  }\n\n  async getContainer(id: string): Promise<ApiResponse<Container>> {\n    return this.request(`/containers/${id}`);\n  }\n\n  async connectContainer(id: string): Promise<ApiResponse<{ status: string; container_id: string; session_id?: string; message: string }>> {\n    return this.request(`/containers/${id}/connect`, {\n      method: 'POST',\n    });\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\nexport default apiService;"],"mappings":"AAAA;;AAWA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,UAAU,CAAC;EACf,MAAcC,OAAOA,CACnBC,QAAgB,EAChBC,OAAoB,GAAG,CAAC,CAAC,EACA;IACzB,MAAMC,GAAG,GAAG,GAAGR,YAAY,GAAGM,QAAQ,EAAE;IAExC,MAAMG,MAAmB,GAAG;MAC1BC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,QAAQH,QAAQ,CAACI,MAAM,KAAKJ,QAAQ,CAACK,UAAU,EAAE,CAAC;MACpE;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,OAAO;QACLD,IAAI;QACJE,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAcd,QAAQ,IAAI,EAAEc,KAAK,CAAC;MAEhD,OAAO;QACLH,IAAI,EAAE,IAAS;QACfE,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEA,KAAK,YAAYN,KAAK,GAAGM,KAAK,CAACE,OAAO,GAAG;MAClD,CAAC;IACH;EACF;;EAEA;EACA,MAAMC,WAAWA,CAAA,EAA8D;IAC7E,OAAO,IAAI,CAAClB,OAAO,CAAC,SAAS,CAAC;EAChC;;EAEA;EACA,MAAMmB,aAAaA,CAAA,EAAsC;IACvD,OAAO,IAAI,CAACnB,OAAO,CAAC,aAAa,CAAC;EACpC;EAEA,MAAMoB,YAAYA,CAACC,EAAU,EAAmC;IAC9D,OAAO,IAAI,CAACrB,OAAO,CAAC,eAAeqB,EAAE,EAAE,CAAC;EAC1C;EAEA,MAAMC,gBAAgBA,CAACD,EAAU,EAAwG;IACvI,OAAO,IAAI,CAACrB,OAAO,CAAC,eAAeqB,EAAE,UAAU,EAAE;MAC/CE,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIzB,UAAU,CAAC,CAAC;AAC1C,eAAeyB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}